<project name="Ser321 Assign4 C++ Message GUI, build file."
         default="targets" basedir="."
         xmlns="antlib:org.apache.tools.ant">
   <taskdef resource="cpptasks.tasks"/>
   <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

   <property name="src" value="./src" />
   <property name="lib" value="./lib" />
   <property name="src.cpp.dir" value="src"/>
   <property name="classes.dir" value="classes" />
   <property name="obj.dir" value="obj"/>
   <property name="dist.dir" value="bin"/>
   <property name="omdbkey" value="myomdbkey"/>
   <property name="host.name" value="localhost"/>
   <property name="port.num" value="8888"/>
   <property name="json.file.name" value="MediaLibraryMethods.json"/>
   <property name="userId" value="${env.USER}"/>
   <property environment="env"/>


<!-- Targets -->
   <target name="targets">   <!-- TODO: need to remove build and execute when server/client works-->
     <echo message="targets are clean, prepare, build, execute, build.cpp.server, build.cpp.client, build.all, targets"/>
     <echo message="execute cpp server with: ./bin/MediaLibraryRPCServer ${port.num}"/>
     <echo message="execute cpp client with: ./bin/MediaRPCClient http://${host.name}:${port.num}"/>
     <echo message="to run, enter: ant execute -DuserId=${userId} -Domdbkey=${omdbkey}"/>
   </target>


<!-- Clean -->
   <target name="clean">
      <delete dir="${classes.dir}" failonerror="false"/>
      <delete dir="${dist.dir}" failonerror="false"/>
      <delete dir="${obj.dir}" failonerror="false"/>
      <delete dir="log" failonerror="false"/>
      <delete file="log.txt" failonerror="false"/>
      <delete file="logerrors.txt" failonerror="false"/>
      <delete file="logpid.txt" failonerror="false"/>
      <delete file="${src.dir}/cpp/server/MediaServerStub.h"
              failonerror="false"/>
      <delete file="${src.dir}/cpp/client/MediaClientStub.h"
              failonerror="false"/>
   </target>


<!-- Prepare  -->
 <target name="prepare" depends="clean">
      <mkdir dir="${classes.dir}"/>
      <mkdir dir="${dist.dir}" />
      <mkdir dir="log" />
      <mkdir dir="${obj.dir}/client" />
      <mkdir dir="${obj.dir}/server" />
      <if>
         <isset property="env.USERNAME"/>
         <then>
            <echo message="detected username is: ${env.USERNAME}"/>
         </then>
      <elseif>
         <isset property="env.USER"/>
         <then>
            <echo message="detected user is: ${env.USER}"/>
         </then>
      </elseif>
      </if>
      <echo message="host name is: ${os.name}"/>
      <echo message="host arch is: ${os.arch}"/>
      <echo message="host version is: ${os.version}"/>

      <!-- Platform identification : Only tested Linux prepare path; may not work with other systems -->
      <condition property="build.host.islinux">
        <and>
          <os family="unix" />
          <not>
            <contains string="${os.name}" substring="mac"
                      casesensitive="false" />
          </not>
        </and>
      </condition>
      <condition property="build.host.platform" value="linux">
        <isset property="build.host.islinux" />
      </condition>

      <condition property="build.host.ismac">
        <and>
          <os family="unix" />
          <contains string="${os.name}" substring="mac" casesensitive="false"/>
        </and>
      </condition>
      <condition property="build.host.platform" value="mac">
        <isset property="build.host.ismac" />
      </condition>

      <fail unless="build.host.platform"
            message="Building on ${os.name} is not supported" />
      <echo message="build.host.platform is: ${build.host.platform}"/>
      <if>
         <isset property="build.host.ismac"/>
         <then>
            <echo message="detected a mac host"/>
            <property name="cxxflag" value="-std=c++14"/>
            <property name="includepath" value="/opt/local/include:/usr/local/include:/usr/include/jsoncpp:/usr/lib"/>
            <property name="client.lib.path" value="/opt/local/lib"/>
            <property name="client.lib.list" value="c++,jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++,fltk,fltk_images,curl,curlpp,jsoncpp,pthread"/>
            <property name="server.lib.path" value="/opt/local/lib"/>
            <property name="server.lib.list" value="c++,jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd,fltk,fltk_images,curl,curlpp,jsoncpp,pthread"/>
         </then>
      <elseif>
         <isset property="build.host.islinux"/>
         <then>
            <echo message="detected a linux host"/>
            <property name="cxxflag" value="-std=c++14"/>
            <property name="includepath" value="/usr/lib:/usr/include:/usr/local/include:/usr/include/jsoncpp"/> <!--TODO: may need to update-->
            <property name="client.lib.path" value="/usr/local/lib"/>
            <property name="client.lib.list" value="jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++,fltk,fltk_images,curl,curlpp,jsoncpp,pthread"/>
            <property name="server.lib.path" value="/usr/local/lib"/>
            <property name="server.lib.list" value="jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd,stdc++,fltk,fltk_images,curl,curlpp,jsoncpp,pthread"/>
         </then>
      </elseif>
      <else>
         <echo message="failed to detect a host I know how to build on"/>
      </else>
   </if>
   </target>


<!-- Build all (server and client) -->
   <target name="build.all"
           depends="clean,prepare,build.cpp.server,build.cpp.client"
           description="Clean then build cpp server, cpp client"/>


<!-- Generate Client Stub -->
   <target name="generate.client.stub" depends="prepare">
      <exec dir="${basedir}" executable="jsonrpcstub">
         <arg line="${json.file.name} --cpp-client=MediaClientStub"/>
      </exec>
      <copy file="MediaClientStub.h"
            tofile="${src.dir}/cpp/client/MediaClientStub.h"/>
      <delete file="MediaClientStub.h"/>
   </target>


<!--  Build Client  -->
   <target name="build.cpp.client" depends="generate.client.stub">
      <cc outtype="executable" subsystem="console"
          outfile="${dist.dir}/MediaRPCClient"
          objdir="${obj.dir}/client">
         <compilerarg value="${cxxflag}"/>
         <includepath>
            <pathelement path="${includepath}"/>
         </includepath>
         <libset dir="${client.lib.path}" libs="${client.lib.list}"/>
         <fileset dir="${src.dir}/cpp/client" includes="MediaClientGui.cpp,MediaClient.cpp"/>
         <fileset dir="${src.dir}/cpp/server" includes="MediaLibrary.cpp"/>  <!-- TODO: May need to change -->
      </cc>
   </target>


<!-- Generate Server Stub -->
   <target name="generate.server.stub" depends="prepare">
      <exec dir="${basedir}" executable="jsonrpcstub">
         <arg line="${json.file.name} --cpp-server=MediaServerStub"/>
      </exec>
      <copy file="MediaServerStub.h"
            tofile="${src.dir}/cpp/server/MediaServerStub.h"/>
      <delete file="MediaServerStub.h"/>
   </target>


<!-- Build Server -->
   <target name="build.cpp.server" depends="generate.server.stub">
     <cc outtype="executable" subsystem="console"
         outfile="${dist.dir}/MediaLibraryRPCServer"
         objdir="${obj.dir}/server">
         <compiler name="g++"/>
         <compilerarg value="${cxxflag}"/>
         <includepath>
            <pathelement path="${includepath}"/>
         </includepath>
         <libset dir="${server.lib.path}" libs="${server.lib.list}"/>
         <fileset dir="${src.dir}/cpp/server"
                  includes="MediaLibrary.cpp, SeriesSesason.cpp, Epsisode.cpp"/>  <!-- TODO: include any additional files if created/-->
      </cc>
   </target>


<!-- Original build from Assign 4 -->
   <target name="build" depends="clean, prepare">
      <cc outtype="executable" subsystem="console"
          outfile="${dist.dir}/mediaPlayer"
          objdir="${obj.dir}">
	  <compilerarg value="${cxxflag}"/>
          <includepath>
             <pathelement path="${includepath}"/>
          </includepath>
          <libset dir="${server.lib.path}" libs="${server.lib.list}"/>
          <fileset dir="${src.cpp.dir}/server/" includes="MediaLibrary.cpp,SeriesSeason.cpp,Episode.cpp"/>
          <fileset dir="${src.cpp.dir}/client/" includes="MediaClient.cpp,MediaClientGui.cpp,"/>
      </cc>
   </target>


<!-- Original Execute from Assign 4 -->
   <target name="execute" depends="build">
     <echo message="./bin/mediaPlayer ${userId} ${omdbkey}"/>
     <exec executable="./bin/mediaPlayer">
       <arg line= "${userId} ${omdbkey}"/>
     </exec>
   </target>

</project>
